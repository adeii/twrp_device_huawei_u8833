
project bootable/recovery/
diff --git a/Android.mk b/Android.mk
index f42f8911..6086baa5 100644
--- a/Android.mk
+++ b/Android.mk
@@ -123,7 +123,7 @@ LOCAL_SHARED_LIBRARIES :=
 
 LOCAL_STATIC_LIBRARIES += libguitwrp
 LOCAL_SHARED_LIBRARIES += libaosprecovery libz libc libcutils libstdc++ libtar libblkid libminuitwrp libminadbd libmtdutils libtwadbbu libbootloader_message_twrp
-LOCAL_SHARED_LIBRARIES += libcrecovery libtwadbbu libtwrpdigest libc++
+LOCAL_SHARED_LIBRARIES += libcrecovery libtwadbbu libtwrpdigest #libc++
 
 ifeq ($(shell test $(PLATFORM_SDK_VERSION) -lt 23; echo $$?),0)
     LOCAL_SHARED_LIBRARIES += libstlport
@@ -672,8 +672,8 @@ LOCAL_CFLAGS += -DRECOVERY_API_VERSION=$(RECOVERY_API_VERSION)
 ifeq ($(shell test $(PLATFORM_SDK_VERSION) -lt 23; echo $$?),0)
     LOCAL_SHARED_LIBRARIES += libstdc++ libstlport
     LOCAL_C_INCLUDES += bionic external/stlport/stlport
-else
-    LOCAL_SHARED_LIBRARIES += libc++
+#else
+#    LOCAL_SHARED_LIBRARIES += libc++
 endif
 ifeq ($(shell test $(PLATFORM_SDK_VERSION) -lt 24; echo $$?),0)
     LOCAL_SHARED_LIBRARIES += libmincrypttwrp
diff --git a/bootloader_message_twrp/Android.mk b/bootloader_message_twrp/Android.mk
index e7a3ea0f..ddebfd09 100644
--- a/bootloader_message_twrp/Android.mk
+++ b/bootloader_message_twrp/Android.mk
@@ -26,7 +26,7 @@ else
     LOCAL_C_INCLUDES += external/libcxx/include
     LOCAL_SHARED_LIBRARIES += libc++
 endif
-LOCAL_CFLAGS := -Werror -std=c++11
+LOCAL_CFLAGS := -Werror -std=c++11 -Wno-c++11-narrowing
 # ignore bootloader's factory reset command even when written to /misc
 ifeq ($(TW_IGNORE_MISC_WIPE_DATA), true)
     LOCAL_CFLAGS += -DIGNORE_MISC_WIPE_DATA
diff --git a/bootloader_message_twrp/bootloader_message.cpp b/bootloader_message_twrp/bootloader_message.cpp
index a06ad9a8..c02df6f4 100644
--- a/bootloader_message_twrp/bootloader_message.cpp
+++ b/bootloader_message_twrp/bootloader_message.cpp
@@ -240,9 +240,6 @@ bool update_bootloader_message(const std::vector<std::string>& options, std::str
   strlcpy(boot.recovery, "recovery\n", sizeof(boot.recovery));
   for (const auto& s : options) {
     strlcat(boot.recovery, s.c_str(), sizeof(boot.recovery));
-    if (s.back() != '\n') {
-      strlcat(boot.recovery, "\n", sizeof(boot.recovery));
-    }
   }
   return write_bootloader_message(boot, err);
 }
diff --git a/bootloader_message_twrp/include/bootloader_message_twrp/bootloader_message.h b/bootloader_message_twrp/include/bootloader_message_twrp/bootloader_message.h
index 52c1b86f..883b1d97 100644
--- a/bootloader_message_twrp/include/bootloader_message_twrp/bootloader_message.h
+++ b/bootloader_message_twrp/include/bootloader_message_twrp/bootloader_message.h
@@ -185,44 +185,12 @@ static_assert(sizeof(struct bootloader_control) ==
 #include <string.h>
 #include <vector>
 
-// Read bootloader message into boot. Error message will be set in err.
-bool read_bootloader_message(bootloader_message* boot, std::string* err);
-
-// Read bootloader message from the specified misc device into boot.
-bool read_bootloader_message_from(bootloader_message* boot, const std::string& misc_blk_device,
-                                  std::string* err);
-
-// Write bootloader message to BCB.
-bool write_bootloader_message(const bootloader_message& boot, std::string* err);
-
-// Write bootloader message to the specified BCB device.
-bool write_bootloader_message_to(const bootloader_message& boot,
-                                 const std::string& misc_blk_device, std::string* err);
-
-// Write bootloader message (boots into recovery with the options) to BCB. Will
-// set the command and recovery fields, and reset the rest.
-bool write_bootloader_message(const std::vector<std::string>& options, std::string* err);
-
-// Update bootloader message (boots into recovery with the options) to BCB. Will
-// only update the command and recovery fields.
-bool update_bootloader_message(const std::vector<std::string>& options, std::string* err);
-
 // Clear BCB.
 bool clear_bootloader_message(void* err);
-bool clear_bootloader_message(std::string* err);
-
-// Writes the reboot-bootloader reboot reason to the bootloader_message.
-bool write_reboot_bootloader(std::string* err);
-
-// Read the wipe package from BCB (from offset WIPE_PACKAGE_OFFSET_IN_MISC).
-bool read_wipe_package(std::string* package_data, size_t size, std::string* err);
 
 void set_misc_device(const char* name);
 void get_args(int *argc, char ***argv);
 
-// Write the wipe package into BCB (to offset WIPE_PACKAGE_OFFSET_IN_MISC).
-bool write_wipe_package(const std::string& package_data, std::string* err);
-
 #else
 
 #include <stdbool.h>
diff --git a/common.h b/common.h
index b0901f41..f882230d 100644
--- a/common.h
+++ b/common.h
@@ -19,7 +19,7 @@
 
 #include <stdio.h>
 #include <stdarg.h>
-#include <string>
+#include <stdbool.h>
 
 #ifdef __cplusplus
 extern "C" {
@@ -47,7 +47,7 @@ extern bool modified_flash;
 //typedef struct fstab_rec Volume;
 
 // The current stage, e.g. "1/2".
-extern std::string stage;
+//extern std::string stage;
 
 // The reason argument provided in "--reason=".
 extern const char* reason;
@@ -63,6 +63,6 @@ static bool is_ro_debuggable();
 }
 #endif
 
-bool reboot(const std::string& command);
+//bool reboot(const std::string& command);
 
 #endif  // RECOVERY_COMMON_H
